program 1 --> write a java program to reverse number


import java.util.Scanner;

public class ReverseNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();
        int reversedNumber = reverse(number);
        System.out.println("Reversed number: " + reversedNumber);
        scanner.close();
    }
    
    public static int reverse(int number) {
        int reversedNumber = 0;
        while (number != 0) {
            int digit = number % 10;
            reversedNumber = reversedNumber * 10 + digit;
            number /= 10;
        }
        return reversedNumber;
    }
}


output :

Enter a number: 12345
Reversed number: 54321
-----------------------------------------------------------------------------------------------------------------------------------------

program 2 --> write a program to find fibonacci series upto nth number


import java.util.Scanner;

public class FibonacciSeries {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of terms: ");
        int n = scanner.nextInt();

        System.out.println("Fibonacci series upto " + n + " terms:");
        for (int i = 0; i < n; i++) {
            System.out.print(fibonacci(i) + " ");
        }
        scanner.close();
    }

    public static int fibonacci(int n) {
        if (n <= 1)
            return n;
        else
            return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

output :

Enter the number of terms: 10
Fibonacci series upto 10 terms:
0 1 1 2 3 5 8 13 21 34 

-------------------------------------------------------------------------------------------

program 3 --> Check wheater or not the number is a palindrome 


import java.util.Scanner;

public class PalindromeCheck {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();
        
        if (isPalindrome(number)) {
            System.out.println(number + " is a palindrome.");
        } else {
            System.out.println(number + " is not a palindrome.");
        }
        scanner.close();
    }

    public static boolean isPalindrome(int number) {
        int originalNumber = number;
        int reversedNumber = 0;
        
        while (number != 0) {
            int digit = number % 10;
            reversedNumber = reversedNumber * 10 + digit;
            number /= 10;
        }
        
        return originalNumber == reversedNumber;
    }
}

output :
Enter a number: 12321
12321 is a palindrome.
-------------------------------------------------------------------------------------------
program 4 --> Sorting first half of array in ascending order and second half in decending order

import java.util.Arrays;

public class SortHalfAscendingDescending {
    public static void main(String[] args) {
        int[] array = {5, 3, 8, 4, 2, 7, 1, 6};
        
        // Determine the length of the array
        int length = array.length;
        
        // Sort the first half in ascending order
        Arrays.sort(array, 0, length / 2);
        
        // Sort the second half in descending order
        for (int i = length / 2, j = length - 1; i < j; i++, j--) {
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
        
        // Print the sorted array
        System.out.println("Array after sorting first half in ascending order and second half in descending order:");
        for (int num : array) {
            System.out.print(num + " ");
        }
    }
}

output :
Array after sorting first half in ascending order and second half in descending order:
1 2 3 4 8 7 6 5 
-------------------------------------------------------------------------------------------
program 5 --> Program to reverse original array.

import java.util.Arrays;

public class ReverseArray {
    public static void main(String[] args) {
        int[] array = {5, 3, 8, 4, 2, 7, 1, 6};
        
        // Print original array
        System.out.println("Original Array: " + Arrays.toString(array));
        
        // Reverse the array
        reverseArray(array);
        
        // Print the reversed array
        System.out.println("Reversed Array: " + Arrays.toString(array));
    }
    
    public static void reverseArray(int[] array) {
        int start = 0;
        int end = array.length - 1;
        
        while (start < end) {
            // Swap elements at start and end indices
            int temp = array[start];
            array[start] = array[end];
            array[end] = temp;
            
            // Move indices towards the center
            start++;
            end--;
        }
    }
}

output : 
Original Array: [5, 3, 8, 4, 2, 7, 1, 6]
Reversed Array: [6, 1, 7, 2, 4, 8, 3, 5]
-------------------------------------------------------------------------------------------
program 6 --> Write a program to find common elements between two arrays


import java.util.HashSet;

public class CommonElements {
    public static void main(String[] args) {
        int[] array1 = {1, 2, 3, 4, 5};
        int[] array2 = {3, 4, 5, 6, 7};
        
        System.out.println("Common elements between the two arrays:");
        findCommonElements(array1, array2);
    }
    
    public static void findCommonElements(int[] array1, int[] array2) {
        // Create a HashSet to store unique elements of array1
        HashSet<Integer> set = new HashSet<>();
        
        // Add all elements of array1 to the HashSet
        for (int num : array1) {
            set.add(num);
        }
        
        // Iterate through array2 and check if each element is in the HashSet
        for (int num : array2) {
            if (set.contains(num)) {
                System.out.print(num + " ");
            }
        }
    }
}

output :

Common elements between the two arrays:
3 4 5 
--------------------------------------------------------------------------------------------
program 8 -->Write a program to count the number of even and odd integers in a given array of integers.

public class EvenOddCount {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        
        // Count the number of even and odd integers
        int evenCount = 0;
        int oddCount = 0;
        
        for (int num : array) {
            if (num % 2 == 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }
        
        // Print the counts
        System.out.println("Number of even integers: " + evenCount);
        System.out.println("Number of odd integers: " + oddCount);
    }
}

output: 
Number of even integers: 5
Number of odd integers: 5
-------------------------------------------------------------------------------------------

Program 9 --> Write a program to find a missing number in an array.

public class MissingNumber {
    public static void main(String[] args) {
        int[] array = {1, 2, 4, 5, 6};
        
        int n = array.length + 1; // Number of elements including the missing one
        int totalSum = (n * (n + 1)) / 2; // Sum of n natural numbers
        
        int actualSum = 0;
        for (int num : array) {
            actualSum += num;
        }
        
        int missingNumber = totalSum - actualSum;
        
        System.out.println("The missing number is: " + missingNumber);
    }
}

output :
The missing number is: 3

-------------------------------------------------------------------------------------------

program 10 --> Find row with maximum no. of 1’s

public class MaxOnesInRow {
    public static void main(String[] args) {
        int[][] matrix = {
            {0, 1, 1, 1},
            {0, 0, 1, 1},
            {1, 1, 1, 1},
            {0, 0, 0, 1}
        };

        int maxOnesRow = findMaxOnesRow(matrix);
        
        System.out.println("Row with the maximum number of 1's: " + maxOnesRow);
    }
    
    public static int findMaxOnesRow(int[][] matrix) {
        int maxOnes = 0;
        int maxOnesRow = -1;
        
        for (int i = 0; i < matrix.length; i++) {
            int onesCount = 0;
            for (int j = 0; j < matrix[i].length; j++) {
                if (matrix[i][j] == 1) {
                    onesCount++;
                }
            }
            if (onesCount > maxOnes) {
                maxOnes = onesCount;
                maxOnesRow = i;
            }
        }
        
        return maxOnesRow;
    }
}

output : Row with the maximum number of 1's: 2
-------------------------------------------------------------------------------------------

program 11 --> String question - Remove all characters from string except alphabets

public class RemoveNonAlphabets {
    public static void main(String[] args) {
        String str = "Hello123, World!";

        String result = removeNonAlphabets(str);

        System.out.println("Original String: " + str);
        System.out.println("String after removing non-alphabetic characters: " + result);
    }

    public static String removeNonAlphabets(String str) {
        // Use regular expression to replace all non-alphabetic characters with empty string
        return str.replaceAll("[^a-zA-Z]", "");
    }
}

output:
Original String: Hello123, World!
String after removing non-alphabetic characters: HelloWorld
-------------------------------------------------------------------------------------------
program 12 --> Program to rotate array elements left by 1 position

import java.util.Arrays;

public class RotateArrayLeft {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5};
        int n = array.length;
        
        System.out.println("Original Array: " + Arrays.toString(array));
        
        rotateLeft(array, n);
        
        System.out.println("Array after rotating left by 1 position: " + Arrays.toString(array));
    }
    
    public static void rotateLeft(int[] array, int n) {
        if (n <= 1) {
            return; // No need to rotate if the array has 0 or 1 element
        }
        
        int temp = array[0]; // Store the first element
        
        // Shift elements to the left
        for (int i = 1; i < n; i++) {
            array[i - 1] = array[i];
        }
        
        array[n - 1] = temp; // Place the first element at the end
    }
}
output : Original Array: [1, 2, 3, 4, 5]
Array after rotating left by 1 position: [2, 3, 4, 5, 1]
------------------------------------------------------------------------------------------
program 13 --> Program to rotate array elements by Kth position left

import java.util.Arrays;

public class RotateArrayLeftByK {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5};
        int k = 2; // Number of positions to rotate left
        
        System.out.println("Original Array: " + Arrays.toString(array));
        
        rotateLeftByK(array, k);
        
        System.out.println("Array after rotating left by " + k + " positions: " + Arrays.toString(array));
    }
    
    public static void rotateLeftByK(int[] array, int k) {
        int n = array.length;
        
        // Normalize k if it's greater than array length
        k = k % n;
        
        reverse(array, 0, k - 1); // Reverse first k elements
        reverse(array, k, n - 1); // Reverse remaining elements
        reverse(array, 0, n - 1); // Reverse the whole array
    }
    
    public static void reverse(int[] array, int start, int end) {
        while (start < end) {
            int temp = array[start];
            array[start] = array[end];
            array[end] = temp;
            start++;
            end--;
        }
    }
}

output : Original Array: [1, 2, 3, 4, 5]
Array after rotating left by 2 positions: [3, 4, 5, 1, 2]
-------------------------------------------------------------------------------------------
program 14 --> Program to remove duplicate elements from the array

import java.util.Arrays;

public class RemoveDuplicatesFromArray {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 2, 3, 5, 6, 7, 1, 8, 9, 7};
        
        System.out.println("Original Array: " + Arrays.toString(array));
        
        int[] uniqueArray = removeDuplicates(array);
        
        System.out.println("Array after removing duplicates: " + Arrays.toString(uniqueArray));
    }
    
    public static int[] removeDuplicates(int[] array) {
        // Sort the array to bring duplicates together
        Arrays.sort(array);
        
        int length = array.length;
        
        // Check for duplicates and move unique elements to the beginning
        int j = 0;
        for (int i = 0; i < length - 1; i++) {
            if (array[i] != array[i + 1]) {
                array[j++] = array[i];
            }
        }
        
        array[j++] = array[length - 1]; // Copy the last element (which is unique)
        
        // Create a new array to store only unique elements
        int[] uniqueArray = Arrays.copyOf(array, j);
        
        return uniqueArray;
    }
}

output : Original Array: [1, 2, 3, 4, 2, 3, 5, 6, 7, 1, 8, 9, 7]
Array after removing duplicates: [1, 2, 3, 4, 5, 6, 7, 8, 9]
-------------------------------------------------------------------------------------------
program 15 --> Program to find string is anagram or not.

import java.util.Arrays;

public class AnagramCheck {
    public static void main(String[] args) {
        String str1 = "listen";
        String str2 = "silent";

        if (areAnagrams(str1, str2)) {
            System.out.println(str1 + " and " + str2 + " are anagrams.");
        } else {
            System.out.println(str1 + " and " + str2 + " are not anagrams.");
        }
    }

    public static boolean areAnagrams(String str1, String str2) {
        // Remove spaces and convert strings to lowercase
        str1 = str1.replaceAll("\\s", "").toLowerCase();
        str2 = str2.replaceAll("\\s", "").toLowerCase();

        // Check if the lengths of both strings are equal
        if (str1.length() != str2.length()) {
            return false;
        }

        // Convert strings to character arrays and sort them
        char[] charArray1 = str1.toCharArray();
        char[] charArray2 = str2.toCharArray();
        Arrays.sort(charArray1);
        Arrays.sort(charArray2);

        // Check if the sorted arrays are equal
        return Arrays.equals(charArray1, charArray2);
    }
}

output : listen and silent are anagrams.
-------------------------------------------------------------------------------------------
program 16 --> Program to check string is pangram or not

public class PangramCheck {
    public static void main(String[] args) {
        String str = "The quick brown fox jumps over the lazy dog";

        if (isPangram(str)) {
            System.out.println("The string is a pangram.");
        } else {
            System.out.println("The string is not a pangram.");
        }
    }

    public static boolean isPangram(String str) {
        // Convert the string to lowercase to make comparison case-insensitive
        str = str.toLowerCase();

        // Create a boolean array to mark the presence of each alphabet
        boolean[] alphabetPresent = new boolean[26];

        // Iterate through the string and mark each alphabet present
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            if (ch >= 'a' && ch <= 'z') {
                alphabetPresent[ch - 'a'] = true;
            }
        }

        // Check if all alphabets are present
        for (boolean isPresent : alphabetPresent) {
            if (!isPresent) {
                return false;
            }
        }

        return true;
    }
}

output:
The string is a pangram.
-------------------------------------------------------------------------------------------

program 17 --> Program to check number Armstrong or not

public class ArmstrongNumberCheck {
    public static void main(String[] args) {
        int number = 153;

        if (isArmstrong(number)) {
            System.out.println(number + " is an Armstrong number.");
        } else {
            System.out.println(number + " is not an Armstrong number.");
        }
    }

    public static boolean isArmstrong(int number) {
        // Count the number of digits
        int numDigits = String.valueOf(number).length();
        
        int originalNumber = number;
        int sum = 0;
        
        // Compute the sum of digits raised to the power of numDigits
        while (number > 0) {
            int digit = number % 10;
            sum += Math.pow(digit, numDigits);
            number /= 10;
        }
        
        // Check if the sum is equal to the original number
        return sum == originalNumber;
    }
}

output : 
153 is an Armstrong number.
-------------------------------------------------------------------------------------------
program 18 --> How to calculate the number of vowels and consonants in a string?

public class VowelConsonantCount {
    public static void main(String[] args) {
        String str = "Hello World";
        
        int vowelCount = 0;
        int consonantCount = 0;
        
        // Convert the string to lowercase to make comparison case-insensitive
        str = str.toLowerCase();
        
        // Iterate through each character of the string
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            
            // Check if the character is a letter
            if (Character.isLetter(ch)) {
                // Check if the character is a vowel
                if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
                    vowelCount++;
                } else {
                    consonantCount++;
                }
            }
        }
        
        System.out.println("Number of vowels: " + vowelCount);
        System.out.println("Number of consonants: " + consonantCount);
    }
}

output :
Number of vowels: 3
Number of consonants: 7
-------------------------------------------------------------------------------------------program 19 --> Find the index of two array elements whose sum is equal to the given value

import java.util.HashMap;

public class TwoSum {
    public static void main(String[] args) {
        int[] array = {2, 7, 11, 15};
        int target = 9;

        int[] indices = findTwoSumIndices(array, target);

        if (indices != null) {
            System.out.println("Indices of the elements whose sum is equal to " + target + ": " + indices[0] + ", " + indices[1]);
        } else {
            System.out.println("No such indices found.");
        }
    }

    public static int[] findTwoSumIndices(int[] array, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();

        for (int i = 0; i < array.length; i++) {
            int complement = target - array[i];
            if (map.containsKey(complement)) {
                return new int[]{map.get(complement), i};
            }
            map.put(array[i], i);
        }

        return null;
    }
}

output :
Indices of the elements whose sum is equal to 9: 0, 1
-------------------------------------------------------------------------------------------
program 20 --> Write a program to find a word in a given string that has the highest number of repeated letters. If not found, return -1.

import java.util.HashMap;

public class WordWithHighestRepeatedLetters {
    public static void main(String[] args) {
        String str = "hello world test success";
        
        String word = findWordWithHighestRepeatedLetters(str);
        
        if (word != null) {
            System.out.println("Word with the highest number of repeated letters: " + word);
        } else {
            System.out.println("No word with repeated letters found.");
        }
    }
    
    public static String findWordWithHighestRepeatedLetters(String str) {
        String[] words = str.split("\\s+");
        String resultWord = null;
        int maxCount = 0;
        
        for (String word : words) {
            int count = countRepeatedLetters(word);
            if (count > maxCount) {
                maxCount = count;
                resultWord = word;
            }
        }
        
        return resultWord;
    }
    
    public static int countRepeatedLetters(String word) {
        HashMap<Character, Integer> map = new HashMap<>();
        
        for (char ch : word.toCharArray()) {
            map.put(ch, map.getOrDefault(ch, 0) + 1);
        }
        
        int maxCount = 0;
        for (int count : map.values()) {
            if (count > 1) {
                maxCount = Math.max(maxCount, count);
            }
        }
        
        return maxCount;
    }
}

output :
Word with the highest number of repeated letters: success

